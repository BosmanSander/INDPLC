
INDPLC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  0000023a  000002ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800138  00800138  00000306  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000306  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000151c  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000be8  00000000  00000000  00001974  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000925  00000000  00000000  0000255c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000250  00000000  00000000  00002e84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000072b  00000000  00000000  000030d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008f4  00000000  00000000  000037ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000040f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e3       	ldi	r30, 0x3A	; 58
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 33       	cpi	r26, 0x38	; 56
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e3       	ldi	r26, 0x38	; 56
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 33       	cpi	r26, 0x39	; 57
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 89 00 	call	0x112	; 0x112 <main>
  9e:	0c 94 1b 01 	jmp	0x236	; 0x236 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_ZN11CanbusClass4initEh>:





char CanbusClass::init(unsigned char speed) {
  a6:	86 2f       	mov	r24, r22

  return mcp2515_init(speed);
  a8:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <mcp2515_init>
 
}
  ac:	08 95       	ret

000000ae <_Z9writeCharc>:



void writeChar(char x) {
	
	while(~UCSR0A & (1 << UDRE0));
  ae:	e0 ec       	ldi	r30, 0xC0	; 192
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	90 81       	ld	r25, Z
  b4:	95 ff       	sbrs	r25, 5
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <_Z9writeCharc+0x4>
	UDR0 = x;
  b8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  bc:	08 95       	ret

000000be <_Z11writeStringPc>:
}


void writeString(char* test){
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	ec 01       	movw	r28, r24
	int count = 0;
	while(test[count]){
  c4:	88 81       	ld	r24, Y
  c6:	88 23       	and	r24, r24
  c8:	31 f0       	breq	.+12     	; 0xd6 <_Z11writeStringPc+0x18>
  ca:	21 96       	adiw	r28, 0x01	; 1
		writeChar(test[count++]);
  cc:	0e 94 57 00 	call	0xae	; 0xae <_Z9writeCharc>
}


void writeString(char* test){
	int count = 0;
	while(test[count]){
  d0:	89 91       	ld	r24, Y+
  d2:	81 11       	cpse	r24, r1
  d4:	fb cf       	rjmp	.-10     	; 0xcc <_Z11writeStringPc+0xe>
		writeChar(test[count++]);
	}
	writeChar('\n');
  d6:	8a e0       	ldi	r24, 0x0A	; 10
  d8:	0e 94 57 00 	call	0xae	; 0xae <_Z9writeCharc>
	writeChar('\r');
  dc:	8d e0       	ldi	r24, 0x0D	; 13
  de:	0e 94 57 00 	call	0xae	; 0xae <_Z9writeCharc>
}
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <_Z9initUsartv>:

void initUsart(){
	UCSR0A = 0;
  e8:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
  ec:	e1 ec       	ldi	r30, 0xC1	; 193
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	88 61       	ori	r24, 0x18	; 24
  f4:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00 );
  f6:	a2 ec       	ldi	r26, 0xC2	; 194
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	8c 91       	ld	r24, X
  fc:	86 60       	ori	r24, 0x06	; 6
  fe:	8c 93       	st	X, r24
	UBRR0H=00;
 100:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L=103; //baudrade 9600 bij
 104:	87 e6       	ldi	r24, 0x67	; 103
 106:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	UCSR0B |= (1 << RXCIE0);
 10a:	80 81       	ld	r24, Z
 10c:	80 68       	ori	r24, 0x80	; 128
 10e:	80 83       	st	Z, r24
 110:	08 95       	ret

00000112 <main>:
	
}
int main(void)
{
	initUsart();
 112:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z9initUsartv>
	
	bool connected = false;
	
	if(Canbus.init(CANSPEED_250)){  //Initialise MCP2515 CAN controller at the specified speed
 116:	63 e0       	ldi	r22, 0x03	; 3
 118:	88 e3       	ldi	r24, 0x38	; 56
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN11CanbusClass4initEh>
 120:	88 23       	and	r24, r24
 122:	31 f0       	breq	.+12     	; 0x130 <main+0x1e>
		writeString("CAN Init ok");
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z11writeStringPc>
		connected = true;
 12c:	c1 e0       	ldi	r28, 0x01	; 1
 12e:	05 c0       	rjmp	.+10     	; 0x13a <main+0x28>
	}else{
		writeString("Can't init CAN");
 130:	8c e0       	ldi	r24, 0x0C	; 12
 132:	91 e0       	ldi	r25, 0x01	; 1
 134:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z11writeStringPc>
}
int main(void)
{
	initUsart();
	
	bool connected = false;
 138:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t test = 0;
    /* Replace with your application code */
    while (1) 
    {
			
			if(connected){
 13a:	cc 23       	and	r28, r28
 13c:	29 f0       	breq	.+10     	; 0x148 <main+0x36>
				writeString("connected\n\r");
 13e:	8b e1       	ldi	r24, 0x1B	; 27
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z11writeStringPc>
 146:	f9 cf       	rjmp	.-14     	; 0x13a <main+0x28>
			}else{
				writeString("not connected\r\n");
 148:	87 e2       	ldi	r24, 0x27	; 39
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z11writeStringPc>
 150:	f4 cf       	rjmp	.-24     	; 0x13a <main+0x28>

00000152 <spi_putc>:
	data = spi_putc(0xff);
	
	SET(MCP2515_CS);
	
	return data;
}
 152:	8e bd       	out	0x2e, r24	; 46
 154:	0d b4       	in	r0, 0x2d	; 45
 156:	07 fe       	sbrs	r0, 7
 158:	fd cf       	rjmp	.-6      	; 0x154 <spi_putc+0x2>
 15a:	8e b5       	in	r24, 0x2e	; 46
 15c:	08 95       	ret

0000015e <mcp2515_write_register>:
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	d8 2f       	mov	r29, r24
 164:	c6 2f       	mov	r28, r22
 166:	2a 98       	cbi	0x05, 2	; 5
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	0e 94 a9 00 	call	0x152	; 0x152 <spi_putc>
 16e:	8d 2f       	mov	r24, r29
 170:	0e 94 a9 00 	call	0x152	; 0x152 <spi_putc>
 174:	8c 2f       	mov	r24, r28
 176:	0e 94 a9 00 	call	0x152	; 0x152 <spi_putc>
 17a:	2a 9a       	sbi	0x05, 2	; 5
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

00000182 <mcp2515_read_register>:
 182:	cf 93       	push	r28
 184:	c8 2f       	mov	r28, r24
 186:	2a 98       	cbi	0x05, 2	; 5
 188:	83 e0       	ldi	r24, 0x03	; 3
 18a:	0e 94 a9 00 	call	0x152	; 0x152 <spi_putc>
 18e:	8c 2f       	mov	r24, r28
 190:	0e 94 a9 00 	call	0x152	; 0x152 <spi_putc>
 194:	8f ef       	ldi	r24, 0xFF	; 255
 196:	0e 94 a9 00 	call	0x152	; 0x152 <spi_putc>
 19a:	2a 9a       	sbi	0x05, 2	; 5
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <mcp2515_init>:

// -------------------------------------------------------------------------
uint8_t mcp2515_init(uint8_t speed)
{
 1a0:	cf 93       	push	r28
 1a2:	c8 2f       	mov	r28, r24
		
	
	SET(MCP2515_CS);
 1a4:	2a 9a       	sbi	0x05, 2	; 5
	SET_OUTPUT(MCP2515_CS);
 1a6:	22 9a       	sbi	0x04, 2	; 4
	
	RESET(P_SCK);
 1a8:	2d 98       	cbi	0x05, 5	; 5
	RESET(P_MOSI);
 1aa:	2b 98       	cbi	0x05, 3	; 5
	RESET(P_MISO);
 1ac:	2c 98       	cbi	0x05, 4	; 5
	
	SET_OUTPUT(P_SCK);
 1ae:	25 9a       	sbi	0x04, 5	; 4
	SET_OUTPUT(P_MOSI);
 1b0:	23 9a       	sbi	0x04, 3	; 4
	SET_INPUT(P_MISO);
 1b2:	24 98       	cbi	0x04, 4	; 4
	
	SET_INPUT(MCP2515_INT);
 1b4:	52 98       	cbi	0x0a, 2	; 10
	SET(MCP2515_INT);
 1b6:	5a 9a       	sbi	0x0b, 2	; 11
	
	// active SPI master interface
	SPCR = (1<<SPE)|(1<<MSTR) | (0<<SPR1)|(1<<SPR0);
 1b8:	81 e5       	ldi	r24, 0x51	; 81
 1ba:	8c bd       	out	0x2c, r24	; 44
	SPSR = 0;
 1bc:	1d bc       	out	0x2d, r1	; 45
	
	// reset MCP2515 by software reset.
	// After this he is in configuration mode.
	RESET(MCP2515_CS);
 1be:	2a 98       	cbi	0x05, 2	; 5
	spi_putc(SPI_RESET);
 1c0:	80 ec       	ldi	r24, 0xC0	; 192
 1c2:	0e 94 a9 00 	call	0x152	; 0x152 <spi_putc>
	SET(MCP2515_CS);
 1c6:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c8:	83 e0       	ldi	r24, 0x03	; 3
 1ca:	8a 95       	dec	r24
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <mcp2515_init+0x2a>
 1ce:	00 00       	nop
	
	// wait a little bit until the MCP2515 has restarted
	_delay_us(10);
	
	// load CNF1..3 Register
	RESET(MCP2515_CS);
 1d0:	2a 98       	cbi	0x05, 2	; 5
	spi_putc(SPI_WRITE);
 1d2:	82 e0       	ldi	r24, 0x02	; 2
 1d4:	0e 94 a9 00 	call	0x152	; 0x152 <spi_putc>
	spi_putc(CNF3);
 1d8:	88 e2       	ldi	r24, 0x28	; 40
 1da:	0e 94 a9 00 	call	0x152	; 0x152 <spi_putc>
/*	
	spi_putc((1<<PHSEG21));		// Bitrate 250 kbps at 16 MHz
	spi_putc((1<<BTLMODE)|(1<<PHSEG11));
	spi_putc((1<<BRP1)|(1<<BRP0));
*/	
	spi_putc((1<<PHSEG21));		// Bitrate 250 kbps at 16 MHz
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	0e 94 a9 00 	call	0x152	; 0x152 <spi_putc>
	spi_putc((1<<BTLMODE)|(1<<PHSEG11));
 1e4:	80 e9       	ldi	r24, 0x90	; 144
 1e6:	0e 94 a9 00 	call	0x152	; 0x152 <spi_putc>
	//spi_putc(1<<BRP0);
    spi_putc(speed);
 1ea:	8c 2f       	mov	r24, r28
 1ec:	0e 94 a9 00 	call	0x152	; 0x152 <spi_putc>

	// activate interrupts
	spi_putc((1<<RX1IE)|(1<<RX0IE));
 1f0:	83 e0       	ldi	r24, 0x03	; 3
 1f2:	0e 94 a9 00 	call	0x152	; 0x152 <spi_putc>
	SET(MCP2515_CS);
 1f6:	2a 9a       	sbi	0x05, 2	; 5
	
	// test if we could read back the value => is the chip accessible?
	if (mcp2515_read_register(CNF1) != speed) {
 1f8:	8a e2       	ldi	r24, 0x2A	; 42
 1fa:	0e 94 c1 00 	call	0x182	; 0x182 <mcp2515_read_register>
 1fe:	c8 17       	cp	r28, r24
 200:	19 f0       	breq	.+6      	; 0x208 <mcp2515_init+0x68>
		SET(LED2_HIGH);
 202:	28 9a       	sbi	0x05, 0	; 5

		return false;
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	15 c0       	rjmp	.+42     	; 0x232 <mcp2515_init+0x92>
	}
	
	// deaktivate the RXnBF Pins (High Impedance State)
	mcp2515_write_register(BFPCTRL, 0);
 208:	60 e0       	ldi	r22, 0x00	; 0
 20a:	8c e0       	ldi	r24, 0x0C	; 12
 20c:	0e 94 af 00 	call	0x15e	; 0x15e <mcp2515_write_register>
	
	// set TXnRTS as inputs
	mcp2515_write_register(TXRTSCTRL, 0);
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	8d e0       	ldi	r24, 0x0D	; 13
 214:	0e 94 af 00 	call	0x15e	; 0x15e <mcp2515_write_register>
	
	// turn off filters => receive any message
	mcp2515_write_register(RXB0CTRL, (1<<RXM1)|(1<<RXM0));
 218:	60 e6       	ldi	r22, 0x60	; 96
 21a:	80 e6       	ldi	r24, 0x60	; 96
 21c:	0e 94 af 00 	call	0x15e	; 0x15e <mcp2515_write_register>
	mcp2515_write_register(RXB1CTRL, (1<<RXM1)|(1<<RXM0));
 220:	60 e6       	ldi	r22, 0x60	; 96
 222:	80 e7       	ldi	r24, 0x70	; 112
 224:	0e 94 af 00 	call	0x15e	; 0x15e <mcp2515_write_register>
	
	// reset device to normal mode
	mcp2515_write_register(CANCTRL, 0);
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	8f e0       	ldi	r24, 0x0F	; 15
 22c:	0e 94 af 00 	call	0x15e	; 0x15e <mcp2515_write_register>
//	SET(LED2_HIGH);
	return true;
 230:	81 e0       	ldi	r24, 0x01	; 1
}
 232:	cf 91       	pop	r28
 234:	08 95       	ret

00000236 <_exit>:
 236:	f8 94       	cli

00000238 <__stop_program>:
 238:	ff cf       	rjmp	.-2      	; 0x238 <__stop_program>
